use import std.array
use import std.map
use import std.box
use import std.string
use import std.math
use import std.matrix
use import std.rc
use import std.thread

mem :: import std.mem.allocator
fmt :: import std.fmt
io  :: import std.io
C   :: import std.c
fs  :: import std.io.fs

use import glfw

use import vulkan
use import vulkan_utils
use import spirv_cross
vk :: import vulkan_hl

use import imgui_glfw
use import imgui_vulkan
imgui :: import imgui

clap :: import clap.clap

use import obj
use import app
use import mesh

mat4 :: Matrix4[f32]
vec2 :: Vector2[f32]
vec3 :: Vector3[f32]
vec4 :: Vector4[f32]

#export_scope

enable_validation_layers :: true
validation_layers := [
    "VK_LAYER_KHRONOS_validation"c
]
device_extensions := [
    VK_KHR_SWAPCHAIN_EXTENSION_NAME
]

glfw_error_callback :: (error: i32, description: ^mut char8) {
    desc := String.from_cstring(description)
    io.formatln("Glfw Error {}: {}", [error, desc.slice()])
}

vulkan_debug_callback :: (
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pCallbackData: ^mut VkDebugUtilsMessengerCallbackDataEXT,
    pUserData: ^mut void) -> VkBool32 #stdcall {

    if i32(messageSeverity) >= i32(VkDebugUtilsMessageSeverityFlagBitsEXT.WarningBitExt) {
        level := match messageSeverity {
            .VerboseBitExt  -> "Verbose"
            .InfoBitExt     -> "Info"
            .WarningBitExt  -> "Warning"
            .ErrorBitExt    -> "Error"
            _               -> "?"
        }

        io.formatln("[Vulkan {}] {}", [level, string.from_cstring(pCallbackData.pMessage)])
    }

    return VK_FALSE
}

VulkanContext :: struct {
    instance        : vk.Instance
    debug_messenger : vk.DebugUtilsMessenger
    surface         : vk.Surface
    physical_device : vk.PhysicalDevice
    device          : vk.Device
    graphics_queue  : vk.Queue
    present_queue   : vk.Queue
    graphics_queue_family : u32
    present_queue_family  : u32
}

impl VulkanContext {
    destroy :: (&Self) {
        self.device.destroy()
        self.surface.destroy()
        self.debug_messenger.destroy()
        self.instance.destroy()
    }
}

impl Drop for VulkanContext {
    drop :: (&Self) {
        self.destroy()
    }
}

impl VulkanContext {
    new :: (window: ^GLFWwindow) -> Result[^mut VulkanContext, vk.Error] {
        validation_info := vk.ValidationInfo(
            message_severity = .VerboseBitExt or .InfoBitExt or .WarningBitExt or .ErrorBitExt
            message_type     = .GeneralBitExt or .ValidationBitExt or .PerformanceBitExt
            user_callback    = vulkan_debug_callback
            user_data        = null
        )


        device_extensions := [string.from_cstring(VK_KHR_SWAPCHAIN_EXTENSION_NAME)]

        extensions := Array[string].new()

        // add extensions for glfw
        mut glfw_extensions : []^char8 = default
        glfw_extensions.data = glfwGetRequiredInstanceExtensions(cast ^mut glfw_extensions.length)
        for glfw_ext in glfw_extensions {
            extensions.add(string.from_cstring(glfw_ext))
        }

        instance := try(vk.Instance.new(
            api_version = Some(vk.Version((1, 2, 0)))
            validation  = Some(validation_info)
            extensions = extensions[..]
        ))

        debug_messenger := try(instance.create_debug_messenger(validation_info))
        surface := try(instance.create_surface_glfw(window))

        // find suitable physical device
        physical_devices := try(instance.enumerate_physical_devices())

        suitable_physical_devices := vk.PhysicalDevice.filter_by_requirements(physical_devices[..],
            extensions = device_extensions
            queues     = [vk.QueueFlags.GraphicsBit or .TransferBit]
            present    = Some(&surface)
            swapchain  = Some(&surface)
        )

        if suitable_physical_devices.count() == 0 {
            return Err(vk.Error.NoPhysicalDevice)
        }

        physical_device := *suitable_physical_devices[0]
        graphics_families := physical_device.get_queue_families_with(.GraphicsBit or .TransferBit)
        present_families := physical_device.get_queue_families_with_present(&surface)

        graphics_family := *graphics_families[0]
        present_family := *present_families[0]

        // create device
        unique_queue_families := Map[u32, ()].new()
        unique_queue_families.set(graphics_family, ())
        unique_queue_families.set(present_family, ())

        queue_create_infos := Array[vk.DeviceQueueCreateInfo].new(unique_queue_families.count())
        for kv in &unique_queue_families {
            queue_create_infos.add(vk.DeviceQueueCreateInfo(
                family      = *kv.key
                priorities  = [1.0]
            ))
        }

        features12 := VkPhysicalDeviceVulkan12Features(
            sType = .PhysicalDeviceVulkan12Features
            hostQueryReset = 1
        )

        features := VkPhysicalDeviceFeatures2(
            sType = .PhysicalDeviceFeatures2
            pNext = ^features12
            features = VkPhysicalDeviceFeatures()
        )
        device := try(vk.Device.new(physical_device,
            extensions = device_extensions
            queues = queue_create_infos[..]
            features = ^features))
        graphics_queue := device.get_queue(graphics_family)
        present_queue := device.get_queue(present_family)

        result := mem.alloc(VulkanContext)
        *result = VulkanContext(
            instance        = instance
            debug_messenger = debug_messenger
            surface         = surface
            physical_device = *physical_device
            device          = device
            graphics_queue  = graphics_queue
            present_queue   = present_queue
            graphics_queue_family = graphics_family
            present_queue_family  = present_family
        )
        return Ok(result)
    }
}

FrameData :: struct {
    command_buffer  : VkCommandBuffer = default
    sema_acquire    : VkSemaphore = default
    sema_render     : VkSemaphore = default
    fence_draw_done : VkFence = default
    query_pool      : VkQueryPool = default
    query_results   : [2]u64 = default

    draw_data_buffer    := Rc[vk.Buffer].empty()
    draw_data           : ^mut DrawData = null
    frame_descriptor_set    : VkDescriptorSet = default
    mesh_descriptor_set     : VkDescriptorSet = default
}

FrameStatistics :: struct {
    avg_speed   := 0.02
    total_time  := 0.0
    cpu_time    := 0.0
    wait_time   := 0.0
    gpu_time    := 0.0
}

DrawData :: struct {
    model := mat4()
    view := mat4()
    proj := mat4()
}

HelloTriangleApplication :: struct {
    // window stuff
    window                  : ^mut GLFWwindow = null
    window_size             : (x: i32, y: i32) = 1280, 720

    current_frame           := 0
    framebuffer_resized     := false

    // vulkan stuff
    context                 : ^VulkanContext = null
    imgui_context           : ^imgui.ImGuiContext = null

    surface_capabilities    := Option[vk.PhysicalDeviceSurfaceCapabilities].None
    swapchain_format        : VkSurfaceFormatKHR = default
    swapchain               := Rc[vk.Swapchain].empty()

    render_pass             : VkRenderPass = null
    pipeline_cache          : VkPipelineCache = null
    descriptor_pool         : VkDescriptorPool = null
    command_pool            : VkCommandPool = null

    graphics_pipeline       : vk.GraphicsPipeline = default

    frames                  := Array[FrameData].new()
    frame_statistics        := FrameStatistics()

    clear_color             : [4]f32 = [0.1, 0.1, 0.1, 1.0]
    show_demo_window        := false

    mesh_file               := String.with_capacity(256)
    mesh                    := Rc[Mesh].empty()

    camera_pitch            := 0.0f
    camera_yaw              := 0.0f
    camera_distance         := 2.0f
    camera_lookat           := vec3()
    camera_perspective      := true
    mouse_scroll            := vec2()
    scroll_speed            := 0.2f
    mouse_sensitivity       := 0.5f
    camera_fov              := 50.0f
}

impl HelloTriangleApplication {
    new :: () -> HelloTriangleApplication {
        return HelloTriangleApplication()
    }


    run :: (&mut Self, args: []String) -> Result[(), String] {
        defer self.cleanup()

        // init stuff
        try(self.init_window())
        try(self.init_vulkan())

        try(self.on_init(args))


        // imgui setup
        try(self.init_imgui(window))

        // (self.query_result_buffer, self.query_result_buffer_mem) = try(self.create_buffer(100 * @sizeof(u64)))
        // vk_try(vkMapMemory(self.context.device.handle, self.query_result_buffer_mem, 0, 100 * @sizeof(u64), .None, cast ^mut self.query_result_buffer_ptr.data))
        // self.query_result_buffer_ptr.length = 100

        self.main_loop()

        return Ok()
    }
    
    cleanup_swapchain :: (&mut Self) {
        for(by_ref=false) framebuffer in self.swapchain.get().get_framebuffers() {
            if framebuffer != null then vkDestroyFramebuffer(self.context.device.handle, framebuffer, null)
        }

        for(by_ref=false) view in self.swapchain.get().get_image_views() {
            if view != null then vkDestroyImageView(self.context.device.handle, view, null)
        }

        swapchain.get().destroy()
    }

    cleanup :: (&mut Self) {
        self.on_cleanup()

        // imgui
        vkDeviceWaitIdle(self.context.device.handle)

        if self.imgui_context != null {
            ImGui_ImplVulkan_Shutdown()
            ImGui_ImplGlfw_Shutdown()
            imgui.DestroyContext(null)
        }

        if !self.mesh.is_null() then self.mesh.get().destroy(&self.context.device)

        for(by_ref=true) frame in self.frames[..] {
            vkDestroyFence(self.context.device.handle, frame.fence_draw_done, null)
            vkDestroySemaphore(self.context.device.handle, frame.sema_acquire, null)
            vkDestroySemaphore(self.context.device.handle, frame.sema_render, null)
            vkDestroyQueryPool(self.context.device.handle, frame.query_pool, null)
            if !frame.draw_data_buffer.is_null() then frame.draw_data_buffer.get().destroy(self.context.device.handle)
        }

        if descriptor_pool != null then vkDestroyDescriptorPool(self.context.device.handle, descriptor_pool, null)
        if pipeline_cache  != null then vkDestroyPipelineCache(self.context.device.handle, pipeline_cache, null)

        self.cleanup_swapchain()
        if render_pass != null then vkDestroyRenderPass(self.context.device.handle, render_pass, null)
        if command_pool != null then vkDestroyCommandPool(self.context.device.handle, command_pool, null)

        self.context.destroy()
        mem.free(self.context)

        // glfw
        if window != null then glfwDestroyWindow(window)
        glfwTerminate()
    }

    main_loop :: (&mut Self) {
        glfwShowWindow(window)

        while glfwWindowShouldClose(window) == 0 {
            // reset inputs
            self.mouse_scroll = vec2()

            // 
            cpu_start := glfwGetTime()
            glfwPollEvents()

            // render
            draw_frame()

            // 
            cpu_end := glfwGetTime()
            frame := self.frames[(self.current_frame + self.frames.count() - 1) % self.frames.count()]
            timestamp_period := f64(self.context.physical_device.properties.limits.timestampPeriod)
            self.frame_statistics.cpu_time = self.frame_statistics.avg_speed * (cpu_end - cpu_start) * 1000.0 + (1 - self.frame_statistics.avg_speed) * self.frame_statistics.cpu_time
        }

        vkDeviceWaitIdle(self.context.device.handle)
    }

    draw_frame :: (&mut Self) {
        // imgui
        {
            ImGui_ImplVulkan_NewFrame()
            ImGui_ImplGlfw_NewFrame()
            imgui.NewFrame()
            self.on_imgui()
            imgui.Render()
        }

        defer { self.current_frame = (self.current_frame + 1) % self.frames.count() }
        frame : &mut FrameData = self.frames[self.current_frame]

        // acquire image
        image_index := self.prepare_frame(frame)

        // wait for previous frame to be finished
        wait_start := glfwGetTime()
        vk_assert(vkWaitForFences(self.context.device.handle, 1, ^frame.fence_draw_done, VK_TRUE, u64.max))
        wait_end := glfwGetTime()
        self.frame_statistics.wait_time = self.frame_statistics.avg_speed * (wait_end - wait_start) * 1000.0 + (1 - self.frame_statistics.avg_speed) * self.frame_statistics.wait_time

        // get queries from old frame
        vkGetQueryPoolResults(self.context.device.handle, frame.query_pool, 0, cast frame.query_results.length, @sizeof(@typeof(frame.query_results)), cast frame.query_results.data, @sizeof(u64), ._64Bit)

        // render frame
        swapchain := self.swapchain.get()
        self.on_render(frame, *swapchain.get_framebuffers()[int(image_index)], *swapchain.get_images()[int(image_index)], swapchain.get_depth_images()[int(image_index)].handle)

        // render imgui viewports
        imgui_io := imgui.GetIO()
        if imgui.ImGuiConfigFlags.ViewportsEnable is in imgui_io.ConfigFlags {
            imgui.UpdatePlatformWindows()
            imgui.RenderPlatformWindowsDefault(null, null)
        }

        // present image
        self.present(image_index, frame)
    }

    /// acquires next image from swapchain and recreates swapchain if necessary
    prepare_frame :: (&mut Self, frame: &FrameData) -> u32 {
        image_index : u32 = default
        loop match vkAcquireNextImageKHR(self.context.device.handle, self.swapchain.get().handle, u64.max, frame.sema_acquire, null, ^image_index) {
            .Success -> { return image_index }
            .SuboptimalKhr -> { return image_index }

            .ErrorOutOfDateKhr -> {
                self.recreate_swapchains()
            }

            $err -> {
                io.formatln("[Vulkan Error] vkAcquireNextImageKHR returned {}", [err])
                @assert(false)
            }
        }
        @assert(false)
        return 0
    }

    /// present the rendered data in the graphics queue to the swapchain image
    present :: (&mut Self, image_index: u32, frame: &FrameData) {
        sema_render := [frame.sema_render]
        swapchains := [self.swapchain.get().handle]
        present_info := VkPresentInfoKHR(
            sType              = .PresentInfoKhr
            waitSemaphoreCount = cast sema_render.length
            pWaitSemaphores    = sema_render.data
            swapchainCount     = cast swapchains.length
            pSwapchains        = swapchains.data
            pImageIndices      = ^image_index
            pResults           = null
        )
        match vkQueuePresentKHR(self.context.present_queue.handle, ^present_info) {
            .Success -> {}
            .SuboptimalKhr -> {}

            .ErrorOutOfDateKhr -> {
                self.recreate_swapchains()
                return
            }

            $err -> {
                io.formatln("[Vulkan Error] vkQueuePresentKHR returned {}", [err])
                @assert(false)
            }
        }

        if self.framebuffer_resized {
            self.recreate_swapchains()
        }
    }
}

// window stuff
impl HelloTriangleApplication {
    init_window :: (&mut Self) -> Result[(), String] {
        glfwSetErrorCallback(glfw_error_callback)

        if glfwInit() == 0 {
            return Err(fmt.format("Failed to initialize GLFW"))
        }

        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE)
        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE)
        glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)

        mut monitors: []mut ^mut GLFWmonitor = []
        monitors.data = glfwGetMonitors(cast ^mut monitors.length)

        @assert(monitors.length > 0)

        window = glfwCreateWindow(self.window_size.x, self.window_size.y, "Vulkan Test", null, null)
        if window == null {
            return Err(fmt.format("Failed to create window"))
        }

        // center window on monitor
        monitor := *monitors[0]
        vidmode := glfwGetVideoMode(monitor)
        monitor_pos : (x: i32, y: i32) = default
        glfwGetMonitorPos(monitor, ^monitor_pos.x, ^monitor_pos.y)
        glfwSetWindowPos(window, monitor_pos.x + vidmode.width / 2 - self.window_size.x / 2, monitor_pos.y + vidmode.height / 2 - self.window_size.y / 2)

        glfwSetWindowUserPointer(window, ^mut *self)

        glfwSetWindowSizeCallback(window, (window, width, height) => {
            app := cast(^mut HelloTriangleApplication) glfwGetWindowUserPointer(window)
            app.framebuffer_resized = true
        })

        glfwSetScrollCallback(window, (window, scroll_x, scroll_y) => {
            app := cast(^mut HelloTriangleApplication) glfwGetWindowUserPointer(window)
            app.mouse_scroll = vec2(f32(scroll_x), f32(scroll_y))
        })

        return Ok()
    }
}

// vulkan stuff
impl HelloTriangleApplication {
    init_vulkan :: (&mut Self) -> Result[(), String] {
        self.context = try_with(VulkanContext.new(self.window), { return Err(fmt.format("Failed to create context: {}", [err])) })
        self.surface_capabilities = Some(self.context.physical_device.query_swapchain_support(&self.context.surface))
        self.swapchain_format = self.surface_capabilities.unwrap_ref().choose_swap_surface_format(.R8g8b8a8Srgb, .SrgbNonlinearKhr)

        try(self.create_command_pool())
        try(self.create_render_pass())

        self.create_swapchain()

        //
        pool_sizes := [
            VkDescriptorPoolSize(.Sampler, 1000)
            VkDescriptorPoolSize(.CombinedImageSampler, 1000)
            VkDescriptorPoolSize(.SampledImage, 1000)
            VkDescriptorPoolSize(.StorageImage, 1000)
            VkDescriptorPoolSize(.UniformTexelBuffer, 1000)
            VkDescriptorPoolSize(.StorageTexelBuffer, 1000)
            VkDescriptorPoolSize(.UniformBuffer, 1000)
            VkDescriptorPoolSize(.StorageBuffer, 1000)
            VkDescriptorPoolSize(.UniformBufferDynamic, 1000)
            VkDescriptorPoolSize(.StorageBufferDynamic, 1000)
            VkDescriptorPoolSize(.InputAttachment, 1000)
        ]
        descriptor_pool_info := VkDescriptorPoolCreateInfo(
            sType           = .DescriptorPoolCreateInfo
            flags           = .FreeDescriptorSetBit or .UpdateAfterBindBit
            maxSets         = cast 1000 * pool_sizes.length
            poolSizeCount   = cast pool_sizes.length
            pPoolSizes      = pool_sizes.data
        )
        vk_try(vkCreateDescriptorPool(self.context.device.handle, ^descriptor_pool_info, null, ^mut self.descriptor_pool))

        return Ok()
    }

    init_imgui :: (&mut Self, window: ^GLFWwindow) -> Result[(), String] {
        self.imgui_context = imgui.CreateContext(null)

        if imgui_context == null {
            return Err(fmt.format("imgui.CreateContext failed"))
        }

        imgui_io := imgui.GetIO()
        imgui_io.ConfigFlags = imgui_io.ConfigFlags or .DockingEnable or .ViewportsEnable

        imgui.StyleColorsDark(null)

        // change corners so they are right angles instead of rounded
        style := imgui.GetStyle()
        style.WindowRounding = 0.0

        //
        if !ImGui_ImplGlfw_InitForVulkan(cast window, true) {
            return Err(fmt.format("ImGui.ImGui_ImplGlfw_InitForVulkan failed"))
        }

        init_info := ImGui_ImplVulkan_InitInfo(
            Instance        = self.context.instance.handle
            PhysicalDevice  = self.context.physical_device.handle
            Device          = self.context.device.handle
            QueueFamily     = cast self.context.graphics_queue_family
            Queue           = self.context.graphics_queue.handle
            PipelineCache   = self.pipeline_cache
            DescriptorPool  = self.descriptor_pool
            MinImageCount   = cast self.surface_capabilities.unwrap_ref().capabilities.minImageCount
            ImageCount      = cast self.surface_capabilities.unwrap_ref().capabilities.minImageCount
            MSAASamples     = ._1Bit
            Allocator       = null
            CheckVkResultFn = (err) => {
                if err != 0 {
                    io.formatln("[ImGui] error: {}", [err])
                }
            }
        )

        if !ImGui_ImplVulkan_Init(^init_info, self.render_pass) {
            return Err(fmt.format("ImGui.ImGui_ImplVulkan_Init failed"))
        }

        {
            // Use any command queue
            command_pool := self.command_pool
            command_buffer := self.frames[0].command_buffer

            vk_try(vkResetCommandPool(self.context.device.handle, command_pool, .None))
            begin_info := VkCommandBufferBeginInfo(
                sType = .CommandBufferBeginInfo
                flags = .OneTimeSubmitBit
            )
            vk_try(vkBeginCommandBuffer(command_buffer, ^begin_info))

            ImGui_ImplVulkan_CreateFontsTexture(command_buffer)

            end_info := VkSubmitInfo(
                sType = .SubmitInfo
                commandBufferCount = 1
                pCommandBuffers = ^command_buffer
            )
            vk_try(vkEndCommandBuffer(command_buffer))
            vk_try(vkQueueSubmit(self.context.graphics_queue.handle, 1, ^end_info, null))
            vk_try(vkDeviceWaitIdle(self.context.device.handle))
            ImGui_ImplVulkan_DestroyFontUploadObjects()
        }

        return Ok()
    }

    create_swapchain :: (&mut Self) -> Result[(), String] {
        mut window_extent := VkExtent2D()
        glfwGetFramebufferSize(self.window, cast ^mut window_extent.width, cast ^mut window_extent.height)
        while window_extent.width == 0 or window_extent.height == 0 {
            glfwGetFramebufferSize(self.window, cast ^mut window_extent.width, cast ^mut window_extent.height)
            glfwWaitEvents()
        }

        self.swapchain = try_with(vk.Swapchain.new(
            device                  = &self.context.device
            physical_device         = &self.context.physical_device
            surface                 = &self.context.surface
            queue_family_indices    = [self.context.graphics_queue_family, self.context.present_queue_family]
            extent                  = self.surface_capabilities.unwrap_ref().choose_swap_extent(window_extent)
            image_format            = self.swapchain_format.format
            color_space             = self.swapchain_format.colorSpace
            present_mode            = self.surface_capabilities.unwrap_ref().choose_swap_present_mode(.MailboxKhr)
            image_count             = self.surface_capabilities.unwrap_ref().choose_image_count()
            pre_transform           = self.surface_capabilities.unwrap_ref().capabilities.currentTransform
        ), { return Err(fmt.format("Failed to create swapchain: {}", [err])) })
        try_with(self.swapchain.get_mut().create_image_views(), { return Err(fmt.format("Failed to create swapchain image views: {}", [err])) })
        try_with(self.swapchain.get_mut().create_depth_images(&self.context.device), { return Err(fmt.format("Failed to create swapchain depth images: {}", [err])) })
        try_with(self.swapchain.get_mut().create_depth_image_views(), { return Err(fmt.format("Failed to create swapchain depth image views: {}", [err])) })
        try_with(self.swapchain.get_mut().create_framebuffers(self.render_pass), { return Err(fmt.format("Failed to create swapchain framebuffers: {}", [err])) })
        return Ok()
    }

    recreate_swapchains :: (&mut Self) -> Result[(), String] {
        self.framebuffer_resized = false
        vkDeviceWaitIdle(self.context.device.handle)
        self.cleanup_swapchain()
        self.surface_capabilities.unwrap_ref_mut().update_capabilities(&self.context.surface)
        self.create_swapchain()
        return Ok()
    }

    //////////////////////////////////////////
    // stuff for creating render pass
    //////////////////////////////////////////

    create_render_pass :: (&mut Self) -> Result[(), String] {
        attachments := [
            VkAttachmentDescription(
                format         = self.swapchain_format.format
                samples        = ._1Bit
                loadOp         = .Clear
                storeOp        = .Store
                stencilLoadOp  = .DontCare
                stencilStoreOp = .DontCare
                initialLayout  = .Undefined
                finalLayout    = .PresentSrcKhr
            )
            VkAttachmentDescription(
                format         = .D32Sfloat
                samples        = ._1Bit
                loadOp         = .Clear
                storeOp        = .DontCare
                stencilLoadOp  = .DontCare
                stencilStoreOp = .DontCare
                initialLayout  = .DepthStencilAttachmentOptimal
                finalLayout    = .DepthStencilAttachmentOptimal
            )
        ]

        color_attachment_ref := VkAttachmentReference(
            attachment = 0
            layout     = .ColorAttachmentOptimal
        )

        depth_stencil_attachment_ref := VkAttachmentReference(
            attachment  = 1
            layout      = .DepthStencilAttachmentOptimal
        )

        subpasses := [
            VkSubpassDescription(
                pipelineBindPoint       = .Graphics
                inputAttachmentCount    = 0
                pInputAttachments       = null
                colorAttachmentCount    = 1
                pColorAttachments       = ^color_attachment_ref
                pResolveAttachments     = null
                pDepthStencilAttachment = ^depth_stencil_attachment_ref
                preserveAttachmentCount = 0
                pPreserveAttachments    = null
            )
        ]

        dependencies := [
            VkSubpassDependency(
                srcSubpass      = VK_SUBPASS_EXTERNAL
                dstSubpass      = 0
                srcStageMask    = .ColorAttachmentOutputBit
                dstStageMask    = .ColorAttachmentOutputBit
                srcAccessMask   = .None
                dstAccessMask   = .ColorAttachmentWriteBit
                dependencyFlags = .None
            )
            VkSubpassDependency(
                srcSubpass      = 0
                dstSubpass      = 0
                srcStageMask    = .ColorAttachmentOutputBit
                dstStageMask    = .ColorAttachmentOutputBit
                srcAccessMask   = .ColorAttachmentWriteBit
                dstAccessMask   = .ColorAttachmentWriteBit
                dependencyFlags = .ByRegionBit
            )
        ]

        render_pass_info := VkRenderPassCreateInfo(
            sType           = .RenderPassCreateInfo
            attachmentCount = cast attachments.length
            pAttachments    = attachments.data
            subpassCount    = cast subpasses.length
            pSubpasses      = subpasses.data
            dependencyCount = cast dependencies.length
            pDependencies   = dependencies.data
        )

        vk_try(vkCreateRenderPass(self.context.device.handle, ^render_pass_info, null, ^mut self.render_pass))

        return Ok()
    }

    //////////////////////////////////////////
    // stuff for creating command pool
    //////////////////////////////////////////

    create_command_pool :: (&mut Self) -> Result[(), String] {
        pool_info := VkCommandPoolCreateInfo(
            sType            = .CommandPoolCreateInfo
            flags            = .ResetCommandBufferBit
            queueFamilyIndex = self.context.graphics_queue_family
        )

        vk_try(vkCreateCommandPool(self.context.device.handle, ^pool_info, null, ^mut self.command_pool))

        return Ok()
    }
}