use import std.array
use import std.map
use import std.box
use import std.string
use import std.math
use import std.matrix
use import std.rc
use import std.thread
use import std.os.windows_types
use import std.os.windows_functions
use import std.os.windows_constants

mem :: import std.mem.allocator
fmt :: import std.fmt
io  :: import std.io
C   :: import std.c
fs  :: import std.io.fs

use import glfw

use import vulkan
use import vulkan_utils
use import spirv_cross
vk :: import vulkan_hl

use import imgui_glfw
use import imgui_vulkan
imgui :: import imgui

clap :: import clap.clap

use import obj
use import app
use import mesh

mat4 :: Matrix4[f32]
vec2 :: Vector2[f32]
vec3 :: Vector3[f32]
vec4 :: Vector4[f32]

MaxFramesInFlight :: 1

Main :: () {
    args := clap.get_cmd_args()
    hello_triangle_app := HelloTriangleApplication.new()
    match hello_triangle_app.run(args.slice()[1..]) {
        Ok(_) -> {}
        Err($msg) -> {
            io.formatln("[Vulkan Error] {}", [msg])
        }
    }
}

impl HelloTriangleApplication {
    on_init :: (&mut Self, mut args: []String) -> Result[(), String] {
        if args.length != 1 {
            args = ["../assets/meshes/bunny.obj".to_owned()]
        }
        shaders := [
            try(vk.Shader.new(&self.context.device, "triangle.vert.spv"))
            try(vk.Shader.new(&self.context.device, "triangle.frag.spv"))
        ]
        defer { for(by_ref=true) shader in shaders[..] do shader.destroy(self.context.device.handle) }
        self.graphics_pipeline = try(vk.GraphicsPipeline.new(&self.context.device, self.pipeline_cache, self.render_pass, shaders[..]))

        for i in 0 .. MaxFramesInFlight {
            semaphore_info := VkSemaphoreCreateInfo(
                sType = .SemaphoreCreateInfo
            )

            fence_info := VkFenceCreateInfo(
                sType = .FenceCreateInfo
                flags = .SignaledBit
            )

            mut frame := FrameData()
            vk_assert(vkCreateSemaphore(self.context.device.handle, ^semaphore_info, null, ^mut frame.sema_acquire))
            vk_assert(vkCreateSemaphore(self.context.device.handle, ^semaphore_info, null, ^mut frame.sema_render))
            vk_assert(vkCreateFence(self.context.device.handle, ^fence_info, null, ^mut frame.fence_draw_done))

            alloc_info := VkCommandBufferAllocateInfo(
                sType              = .CommandBufferAllocateInfo
                commandPool        = self.command_pool
                level              = .Primary
                commandBufferCount = 1
            )

            vk_assert(vkAllocateCommandBuffers(self.context.device.handle, ^alloc_info, ^mut frame.command_buffer))

            query_pool_info := VkQueryPoolCreateInfo(
                sType               = .QueryPoolCreateInfo
                queryType           = .Timestamp
                queryCount          = 100
                pipelineStatistics  = .None
            )
            vk_try(vkCreateQueryPool(self.context.device.handle, ^query_pool_info, null, ^mut frame.query_pool))

            frame.draw_data_buffer = Rc[vk.Buffer].new(try(vk.Buffer.new(&self.context.device, [VK_QUEUE_FAMILY_IGNORED], @sizeof(DrawData), .TransferDstBit or .UniformBufferBit)))
            vk_try(vkMapMemory(self.context.device.handle, frame.draw_data_buffer.get().memory, 0, @sizeof(DrawData), .None, cast ^mut frame.draw_data))
            *frame.draw_data = DrawData()

            descriptor_set_layouts := [self.graphics_pipeline.frame_set_layout, self.graphics_pipeline.mesh_set_layout]
            descriptor_alloc_info := VkDescriptorSetAllocateInfo(
                sType               = .DescriptorSetAllocateInfo
                descriptorPool      = self.descriptor_pool
                descriptorSetCount  = cast descriptor_set_layouts.length
                pSetLayouts         = descriptor_set_layouts.data
            )
            mut descriptor_sets : [2]VkDescriptorSet = default
            vk_try(vkAllocateDescriptorSets(self.context.device.handle, ^descriptor_alloc_info, descriptor_sets.data))
            frame.frame_descriptor_set = *descriptor_sets[0]
            frame.mesh_descriptor_set = *descriptor_sets[1]

            self.frames.add(frame)
        }

        mesh_files := clap.parse_arguments(Array[String], args)
        if mesh_files != null {
            if mesh_files.count() == 0 {
                return Err(fmt.format("No arguments provided"))
            }
            self.load_mesh(mesh_files.access(0).slice())
        } else {
            return Err(fmt.format("No arguments provided"))
        }

        return Ok()
    }

    load_mesh :: (&mut Self, mesh_file: string) -> Result[(), String] {
        new_mesh := Rc[Mesh].new(try(Mesh.from_file(&self.context.device, mesh_file)))

        vkDeviceWaitIdle(self.context.device.handle)

        if !self.mesh.is_null() then self.mesh.get().destroy(&self.context.device)

        for(by_ref=true) frame in self.frames[..] {
            vertex_buffer_info := VkDescriptorBufferInfo(
                buffer = new_mesh.get().vertex_buffer.handle
                offset = 0
                range = new_mesh.get().vertex_buffer_size
            )
            write_mesh_descriptor_set := VkWriteDescriptorSet(
                sType = .WriteDescriptorSet
                dstSet = frame.mesh_descriptor_set
                dstBinding = 0
                dstArrayElement = 0
                descriptorCount = 1
                descriptorType = .StorageBuffer
                pBufferInfo = ^vertex_buffer_info
            )
            vkUpdateDescriptorSets(self.context.device.handle, 1, &write_mesh_descriptor_set, 0, null)
        }


        self.mesh_file.append_string(mesh_file)
        self.mesh_file.as_cstring()
        self.mesh_file.clear()

        self.mesh = new_mesh
        return Ok()
    }

    on_render :: (&mut Self, frame: &FrameData, framebuffer: VkFramebuffer, image: VkImage, depth: VkImage) {
        extent := self.swapchain.get().extent
        frame.draw_data.model = mat4.from_rotation_y(radians(90.0f) * f32(glfwGetTime()))
        frame.draw_data.model = mat4.id()

        aspect_ratio := f32(extent.width) / f32(extent.height)
        if self.camera_perspective {
            frame.draw_data.view = mat4.from_translation(vec3(0, 0, -self.camera_distance)) * mat4.from_rotation_x(radians(-self.camera_pitch)) * mat4.from_rotation_y(radians(-self.camera_yaw))
            frame.draw_data.proj = mat4.perspective_reverse_z(0.001, radians(self.camera_fov), aspect_ratio, true)
            // frame.draw_data.proj = mat4.perspective(0.001, 1000, radians(self.camera_fov), aspect_ratio, true)
        } else {
            frame.draw_data.view = mat4.from_rotation_x(radians(-self.camera_pitch)) * mat4.from_rotation_y(radians(-self.camera_yaw))
            d := self.camera_distance
            frame.draw_data.proj = mat4.orthographic(-d * aspect_ratio, d * aspect_ratio, d, -d, -4000, 1000)
        }

        draw_data_info := VkDescriptorBufferInfo(
            buffer = frame.draw_data_buffer.get().handle
            offset = 0
            range = @sizeof(DrawData)
        )
        write_frame_descriptor_set := VkWriteDescriptorSet(
            sType = .WriteDescriptorSet
            dstSet = frame.frame_descriptor_set
            dstBinding = 0
            dstArrayElement = 0
            descriptorCount = 1
            descriptorType = .UniformBuffer
            pBufferInfo = ^draw_data_info
        )
        vkUpdateDescriptorSets(self.context.device.handle, 1, &write_frame_descriptor_set, 0, null)
        sema_render := [frame.sema_render]

        sema_acquire := [frame.sema_acquire]

        vkResetCommandBuffer(frame.command_buffer, .None)
        begin_info := VkCommandBufferBeginInfo(
            sType = .CommandBufferBeginInfo
        )
        vk_assert(vkBeginCommandBuffer(frame.command_buffer, ^begin_info))

        clear_values := [
            VkClearValue.color(VkClearColorValue.float32(self.clear_color))
            VkClearValue.depthStencil(VkClearDepthStencilValue(1.0, 0))
        ]
        render_pass_info := VkRenderPassBeginInfo(
            sType           = .RenderPassBeginInfo
            renderPass      = self.render_pass
            framebuffer     = framebuffer
            renderArea      = VkRect2D(
                offset      = VkOffset2D(0, 0)
                extent      = self.swapchain.get().extent
            )
            clearValueCount = cast clear_values.length
            pClearValues    = clear_values.data
        )
        // render imgui

        vkCmdResetQueryPool(frame.command_buffer, frame.query_pool, 0, 100)
        vkCmdWriteTimestamp(frame.command_buffer, .BottomOfPipeBit, frame.query_pool, 0)

        // render
        image_barriers := [
            VkImageMemoryBarrier(
                sType               = .ImageMemoryBarrier
                srcAccessMask       = .None
                dstAccessMask       = .None
                oldLayout           = .Undefined
                newLayout           = .DepthStencilAttachmentOptimal
                srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED
                dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED
                image               = depth
                subresourceRange    = VkImageSubresourceRange(
                    aspectMask      = .DepthBit
                    baseMipLevel    = 0
                    levelCount      = 1
                    baseArrayLayer  = 0
                    layerCount      = 1
                )
            )
        ]
        vkCmdPipelineBarrier(
            _commandBuffer = frame.command_buffer
            _srcStageMask = .TransferBit
            _dstStageMask = .TopOfPipeBit
            _dependencyFlags = .ByRegionBit
            _memoryBarrierCount = 0
            _pMemoryBarriers = null
            _bufferMemoryBarrierCount = 0
            _pBufferMemoryBarriers = null
            _imageMemoryBarrierCount = cast image_barriers.length
            _pImageMemoryBarriers = image_barriers.data
        )

        vkCmdBeginRenderPass(frame.command_buffer, ^render_pass_info, .Inline)
        vkCmdBindPipeline(frame.command_buffer, .Graphics, self.graphics_pipeline.handle)
        vkCmdBindDescriptorSets(frame.command_buffer, .Graphics, self.graphics_pipeline.layout, 0, 1, ^frame.frame_descriptor_set, 0, null)
        
        viewport := VkViewport(
            x        = 0.0
            y        = 0.0
            width    = cast(float) self.swapchain.get().extent.width
            height   = cast(float) self.swapchain.get().extent.height
            minDepth = 0.0
            maxDepth = 1.0
        )

        scissor := VkRect2D(
            offset = VkOffset2D(0, 0)
            extent = self.swapchain.get().extent
        )

        vkCmdSetViewport(frame.command_buffer, 0, 1, ^viewport)
        vkCmdSetScissor(frame.command_buffer, 0, 1, ^scissor)

        vertex_buffer_offset : VkDeviceSize = 0
        vkCmdBindIndexBuffer(frame.command_buffer, self.mesh.get().index_buffer.handle, 0, .Uint32)
        descriptor_sets := [frame.frame_descriptor_set, frame.mesh_descriptor_set]
        vkCmdBindDescriptorSets(frame.command_buffer, .Graphics, self.graphics_pipeline.layout, 1, 1, ^frame.mesh_descriptor_set, 0, null)
        for 0..1 {
            // vkCmdDraw(frame.command_buffer, cast self.mesh.get().vertices.count(), 1, 0, 0)
            vkCmdDrawIndexed(frame.command_buffer, cast self.mesh.get().index_count, 1, 0, 0, 0)
        }

        // render imgui stuff into command buffer
        image_memory_barrier := VkImageMemoryBarrier(
            sType = .ImageMemoryBarrier
            srcAccessMask = .ColorAttachmentWriteBit
            dstAccessMask = .ColorAttachmentWriteBit
            oldLayout = .ColorAttachmentOptimal
            newLayout = .ColorAttachmentOptimal
            srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED
            dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED
            image = image
            subresourceRange = VkImageSubresourceRange(
                aspectMask = .ColorBit
                baseMipLevel = 0
                levelCount = 1
                baseArrayLayer = 0
                layerCount = 1
            )
        )
        vkCmdPipelineBarrier(
            _commandBuffer = frame.command_buffer
            _srcStageMask = .ColorAttachmentOutputBit
            _dstStageMask = .ColorAttachmentOutputBit
            _dependencyFlags = .ByRegionBit
            _memoryBarrierCount = 0
            _pMemoryBarriers = null
            _bufferMemoryBarrierCount = 0
            _pBufferMemoryBarriers = null
            _imageMemoryBarrierCount = 1
            _pImageMemoryBarriers = ^image_memory_barrier
        )
        ImGui_ImplVulkan_RenderDrawData(imgui.GetDrawData(), frame.command_buffer, null)
        vkCmdEndRenderPass(frame.command_buffer)

        // end measure of gpu time
        vkCmdWriteTimestamp(frame.command_buffer, .BottomOfPipeBit, frame.query_pool, 1)

        vk_assert(vkEndCommandBuffer(frame.command_buffer))

        wait_stages := [VkPipelineStageFlagBits.ColorAttachmentOutputBit]
        submit_info := VkSubmitInfo(
            sType                = .SubmitInfo
            waitSemaphoreCount   = cast sema_acquire.length
            pWaitSemaphores      = sema_acquire.data
            pWaitDstStageMask    = wait_stages.data
            commandBufferCount   = 1
            pCommandBuffers      = ^frame.command_buffer
            signalSemaphoreCount = cast sema_render.length
            pSignalSemaphores    = sema_render.data
        )

        vkResetFences(self.context.device.handle, 1, ^frame.fence_draw_done)
        vk_assert(vkQueueSubmit(self.context.graphics_queue.handle, 1, ^submit_info, frame.fence_draw_done))
    }

    on_imgui :: (&mut Self) {
        self.create_dock_space()
        if self.show_demo_window then
            imgui.ShowDemoWindow(^mut self.show_demo_window)

        mut show_settings := true
        imgui.Begin("Settings", ^mut show_settings, .None)
        defer imgui.End()
        {
            { // calculate timing and set title
                frame := self.frames[(self.current_frame + self.frames.count() - 1) % self.frames.count()]
                timestamp_period := f64(self.context.physical_device.properties.limits.timestampPeriod)

                self.frame_statistics.gpu_time = self.frame_statistics.avg_speed * f64(*frame.query_results[1] - *frame.query_results[0]) * timestamp_period * 0.000001 + (1 - self.frame_statistics.avg_speed) * self.frame_statistics.gpu_time

                mut fps := 0.0
                if self.frame_statistics.cpu_time != 0 {
                    fps = 1000.0 / self.frame_statistics.cpu_time
                }

                fps_string := fmt.format("{:.1}", [fps])
                imgui.LabelText("Fps", fps_string.as_cstring())

                cpu_time := fmt.format("{:.2}ms", [self.frame_statistics.cpu_time])
                imgui.LabelText("CPU", cpu_time.as_cstring())

                wait_time := fmt.format("{:.2}ms", [self.frame_statistics.wait_time])
                imgui.LabelText("wait", wait_time.as_cstring())

                gpu_time := fmt.format("{:.2}ms", [self.frame_statistics.gpu_time])
                imgui.LabelText("GPU", gpu_time.as_cstring())

            }

            imgui.Separator()

            imgui.Checkbox("Perspective", ^mut self.camera_perspective)
            if self.camera_perspective then imgui.DragFloat("Camera fov", ^mut self.camera_fov, 0.5f, 1.0, 170.0, "%.1f", .None)
            imgui.DragFloat("Camera sensitivity", ^mut self.mouse_sensitivity, 0.01f, 0.01, 1.5, "%.2f", .None)
            imgui.DragFloat("Zoom sensitivity", ^mut self.scroll_speed, 0.01f, 0.01, 1, "%.2f", .None)

            imgui.Separator()

            imgui.Checkbox("Show demo window", ^mut self.show_demo_window)

            imgui.Separator()

            imgui.ColorEdit3("Clear color", self.clear_color.data, .RGB)

            if imgui.InputText("Mesh"c, cast self.mesh_file.get_raw(), cast self.mesh_file.get_capacity(), .None, null, null) {
            }

            button_size := imgui.ImVec2(0, 0)
            if imgui.Button("Reload Mesh"c, &mut button_size) {
                mesh_file := string.from_cstring(cast self.mesh_file.get_raw())
                match self.load_mesh(mesh_file) {
                    Ok(_) -> {}
                    Err($err) -> {
                        io.formatln("{}", [err])
                    }
                }
            }
            // if imgui.Button("Open Mesh"c, &mut button_size) {
            //     self.open_file_dialog()
            // }

        }
        if !imgui.IsWindowFocused(.AnyWindow) {
            mouse_drag_delta := imgui.GetMouseDragDelta(.Left, 0.1)
            imgui.ResetMouseDragDelta(.Left)

            self.camera_pitch -= mouse_drag_delta.y * self.mouse_sensitivity
            self.camera_yaw -= mouse_drag_delta.x * self.mouse_sensitivity
        }

        if !imgui.IsWindowHovered(.AnyWindow) {
            self.camera_distance *= 1 - self.mouse_scroll.y * self.scroll_speed
            self.camera_distance = clamp(self.camera_distance, 0.1, 100)
        }

    }

    open_file_dialog :: (&mut Self) {
        // filter_u16 := "All`0*.*`0Text`0*.TXT`0`0".to_utf16().unwrap()
        szFile : [260]u16 = default
        ofn := OPENFILENAMEW(
            lStructSize     = @sizeof(OPENFILENAMEW)
            hwndOwner       = null // @TODO 
            lpstrFile       = szFile.data
            nMaxFile        = @sizeof(@typeof(szFile))
            lpstrFilter     = null // filter_u16.data
            nFilterIndex    = 0
            lpstrFileTitle  = null
            nMaxFileTitle   = 0
            lpstrInitialDir = null
            Flags           = @bin_or(OFN_PATHMUSTEXIST, OFN_FILEMUSTEXIST)
        )


        if GetOpenFileNameW(^ofn) != 0 {
            mut file_name_utf16 : []u16 = default
            file_name_utf16.data = ofn.lpstrFile
            for i in (0..) {
                io.formatln(": {}", [char(ofn.lpstrFile[i])])
                if ofn.lpstrFile[i] == 0 then break
                file_name_utf16.length = i
            }

            // use ofn.lpstrFile
            file_name := try_with(String.from_utf16(file_name_utf16), {
                io.formatln("{}", [err])
                return
            })
            io.formatln("open file: {}", [file_name.slice()])
        }
    }

    create_dock_space :: (&mut Self) {
        dockspace_flags     := imgui.ImGuiDockNodeFlags.None or .PassthruCentralNode
        // mut window_flags    := imgui.ImGuiWindowFlags.MenuBar or imgui.ImGuiWindowFlags.NoDocking
        mut window_flags    := imgui.ImGuiWindowFlags.NoDocking

        opt_fullscreen := true
        if opt_fullscreen {
            pivot := imgui.ImVec2(0, 0)

            viewport := imgui.GetMainViewport()
            imgui.SetNextWindowPos(&viewport.Pos, .None, &pivot)
            imgui.SetNextWindowSize(&viewport.Size, .None)
            imgui.SetNextWindowViewport(viewport.ID)
            imgui.PushStyleVar(imgui.ImGuiStyleVar.WindowRounding, 0.0f)
            imgui.PushStyleVar(imgui.ImGuiStyleVar.WindowBorderSize, 0.0f)
            window_flags = window_flags or
                .NoTitleBar or
                .NoCollapse or
                .NoResize or
                .NoMove or
                .NoBringToFrontOnFocus or
                .NoNavFocus
        }

        // When using imguiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background 
        // and handle the pass-thru hole, so we ask Begin() to not render a background.
        if imgui.ImGuiDockNodeFlags.PassthruCentralNode is in dockspace_flags {
            window_flags = window_flags or imgui.ImGuiWindowFlags.NoBackground
        }

        // Important: note that we proceed even if Begin() returns false (aka window is collapsed).
        // This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,
        // all active windows docked into it will lose their parent and become undocked.
        // We cannot preserve the docking relationship between an active window and an inactive docking, otherwise
        // any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.
        window_padding := imgui.ImVec2(0.0f, 0.0f)
        imgui.PushStyleVarVec(imgui.ImGuiStyleVar.WindowPadding, &window_padding)

        open := true
        imgui.Begin("DockSpace Demo", ^open, window_flags)
        imgui.PopStyleVar(1)

        if opt_fullscreen then imgui.PopStyleVar(2)

        // DockSpace
        io := imgui.GetIO()
        if imgui.ImGuiConfigFlags.DockingEnable is in io.ConfigFlags {
            dockspace_id := imgui.GetID("MyDockSpace")
            size := imgui.ImVec2(0.0f, 0.0f)
            imgui.DockSpace(dockspace_id, &size, dockspace_flags, null)
        } else {
            @assert(false)
        }

        imgui.End()
    }

    on_cleanup :: (&mut Self) {
        io.formatln("cleanup()")
        self.graphics_pipeline.destroy()
    }
}