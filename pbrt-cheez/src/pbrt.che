use import std.mem.arena_allocator
use import std.array
use import std.map
use import std.string
use import std.profiling
use import std.rc

mem :: import std.mem.allocator
fmt :: import std.fmt
io  :: import std.io

use import scene
use import math
use import spectrum
use import param_set
use import core
use import integrator
use import texture
use import material

#export_scope

ApiState :: enum {
    Options
    World
}

TransformSet :: struct #copy #align(16) {
    transforms : [2]Transform = [Transform(), Transform()]
}

impl TransformSet {
    first :: (&Self) -> &Transform {
        return transforms[0]
    }

    last :: (&Self) -> &Transform {
        return transforms[1]
    }

    inverse :: (&Self) -> TransformSet {
        return TransformSet([transforms[0].inverse(), transforms[1].inverse()])
    }
}

RenderOptions :: struct #align(16) {
    camera_name         := String.from_string("perspective")
    camera_params       := ParamSet()
    camera_to_world     := TransformSet()
    sampler_name        := String.from_string("halton")
    sampler_params      := ParamSet()
    integrator_name     := String.from_string("path")
    integrator_params   := ParamSet()
    film_name           := String.from_string("image")
    film_params         := ParamSet()
}

impl RenderOptions {
    make_integrator :: (&Self) -> Result[Rc[Integrator], String] {
        return Err(fmt.format("Failed to create integrator"))
    }

    make_scene :: (&Self) -> Rc[Scene] {
        return Rc[Scene].empty()
    }
}

GraphicsState :: struct {
    FloatTextureMap     :: Map[string, Rc[Texture[real]]]
    float_textures      := Rc[FloatTextureMap].new(FloatTextureMap.new())
    
    SpectrumTextureMap  :: Map[string, Rc[Texture[Spectrum]]]
    spectrum_textures   := Rc[SpectrumTextureMap].new(SpectrumTextureMap.new())
    
    NamedMaterialMap    :: Map[string, Rc[MaterialInstance]]
    named_materials     := Rc[NamedMaterialMap].new(NamedMaterialMap.new())

    current_inside_medium   := String.empty()
    current_outside_medium  := String.empty()

    current_material        := Rc[MaterialInstance].empty()

    area_light              := String.empty()
    area_light_params       := ParamSet()

    reverse_orientition     := false

    float_textures_shared       := false
    spectrum_textures_shared    := false
    named_materials_shared      := false
}

impl Clone for GraphicsState {
    clone :: (&Self) -> GraphicsState {
        return GraphicsState(
            float_textures              = float_textures.clone()
            spectrum_textures           = spectrum_textures.clone()
            named_materials             = named_materials.clone()
            float_textures_shared       = float_textures_shared
            spectrum_textures_shared    = spectrum_textures_shared
            named_materials_shared      = named_materials_shared
        )
    }
}

Pbrt :: struct #align(16) {
    current_transforms      := TransformSet()
    active_transform_bits   : int = int.max

    allocator   : ArenaAllocator
    state       := ApiState.Options

    scene                       := Option[Scene].None
    named_coordinate_systems    := Map[string, TransformSet].new()
    render_options              := RenderOptions()
    graphics_state              := GraphicsState()

    pushed_graphics_states          := Array[GraphicsState].new()
    pushed_transforms               := Array[TransformSet].new()
    pushed_active_transform_bits    := Array[int].new()
}

// public api
impl Pbrt {
    new :: () -> Pbrt {
        return Pbrt(
            allocator = ArenaAllocator.new(1024*1024)
        )
    }

    world_begin :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Trying to call 'world_begin()' but already in an active world")
        log("world_begin()")

        state = .World
        active_transform_bits = int.max
        for self.active_transforms() {
            *it = Transform()
        }
        named_coordinate_systems["world"] = current_transforms

        return Ok()
    }

    world_end :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.World, "Can only call 'world_end()' after 'world_begin()'")
        log("world_end()")

        if pushed_graphics_states.count() > 0 {
            log_error("Missing 'attribute_end()'")
            return Err(fmt.format("Missing 'attribute_end()'"))
        }

        if pushed_transforms.count() > 0 {
            log_error("Missing 'transform_end()'")
            return Err(fmt.format("Missing 'transform_end()'"))
        }

        integrator := try(render_options.make_integrator())
        scene := render_options.make_scene()

        integrator.get().render(scene.get())

        // @todo: clean up
        graphics_state = GraphicsState()
        // transform_cache.clear()
        state = .Options
        // ImageTexture<Float, Float>::ClearCache();
        // ImageTexture<RGBSpectrum, Spectrum>::ClearCache();
        render_options = RenderOptions()

        current_transforms = TransformSet()
        active_transform_bits = int.max
        // namedCoordinateSystems.erase(namedCoordinateSystems.begin(), namedCoordinateSystems.end());

        return Ok()
    }

    attribute_begin :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.World, "Can only call 'attribute_begin()' in active world")
        log("attribute_begin()")

        pushed_graphics_states.add(graphics_state.clone())
        pushed_transforms.add(current_transforms)
        pushed_active_transform_bits.add(active_transform_bits)

        graphics_state.float_textures_shared = true
        graphics_state.spectrum_textures_shared = true
        graphics_state.named_materials_shared = true

        return Ok()
    }

    attribute_end :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.World, "Can only call 'attribute_end()' after 'attribute_begin()'")
        log("attribute_end()")

        if pushed_graphics_states.count() == 0 {
            log_error("Unmatched 'attribude_end()' encountered")
            return Err(fmt.format("Unmatched 'attribude_end()' encountered"))
        }

        graphics_state          = pushed_graphics_states.pop()
        current_transforms      = pushed_transforms.pop()
        active_transform_bits   = pushed_active_transform_bits.pop()

        return Ok()
    }

    transform_begin :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.World, "Can only call 'transform_begin()' in active world")
        log("transform_begin()")

        pushed_transforms.add(current_transforms)
        pushed_active_transform_bits.add(active_transform_bits)

        return Ok()
    }

    transform_end :: (&mut Self) -> Result[(), String] {
        profile_function()
        self.expect_state(.World, "Can only call 'transform_end()' after 'attribute_begin()'")
        log("transform_end()")

        if pushed_transforms.count() == 0 {
            log_error("Unmatched 'transform_end()' encountered")
            return Err(fmt.format("Unmatched 'transform_end()' encountered"))
        }

        current_transforms      = pushed_transforms.pop()
        active_transform_bits   = pushed_active_transform_bits.pop()

        return Ok()
    }

    look_at :: (&mut Self, eye: vec3, target: vec3, up: vec3) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Can only call 'look_at()' outside of 'world_begin()' and 'world_end()'")
        log("look_at({}, {}, {})", [eye, target, up])

        transform := Transform.look_at(eye, target, up)
        for self.active_transforms() {
            it *= &transform
        }

        return Ok()
    }

    camera :: (&mut Self, name: string, params: ParamSet) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Can only call 'camera()' outside of 'world_begin()' and 'world_end()'")
        log("camera({}, {})", [name, &params])

        render_options.camera_name = name.to_owned()
        render_options.camera_params = params
        render_options.camera_to_world = current_transforms.inverse()
        named_coordinate_systems["camera"] = render_options.camera_to_world

        return Ok()
    }

    sampler :: (&mut Self, name: string, params: ParamSet) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Can only call 'sampler()' outside of 'world_begin()' and 'world_end()'")
        log("sampler({}, {})", [name, &params])

        render_options.sampler_name = name.to_owned()
        render_options.sampler_params = params

        return Ok()
    }

    integrator :: (&mut Self, name: string, params: ParamSet) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Can only call 'integrator()' outside of 'world_begin()' and 'world_end()'")
        log("integrator({}, {})", [name, &params])

        render_options.integrator_name = name.to_owned()
        render_options.integrator_params = params

        return Ok()
    }

    film :: (&mut Self, name: string, params: ParamSet) -> Result[(), String] {
        profile_function()
        self.expect_state(.Options, "Can only call 'film()' outside of 'world_begin()' and 'world_end()'")
        log("film({}, {})", [name, &params])

        render_options.film_name = name.to_owned()
        render_options.film_params = params

        return Ok()
    }

    active_transform_all :: (&mut Self) -> Result[(), String] {
        active_transform_bits = int.max
        return Ok()
    }

    active_transform_start_time :: (&mut Self) -> Result[(), String] {
        active_transform_bits = 1
        return Ok()
    }

    active_transform_end_time :: (&mut Self) -> Result[(), String] {
        active_transform_bits = 2
        return Ok()
    }

    transform :: (&mut Self, transform: mat4) -> Result[(), String] {
        profile_function()
        log("transform({})", [&transform])

        t := Transform(transform)
        for self.active_transforms() {
            *it = t
        }

        return Ok()
    }

    concat_transform :: (&mut Self, transform: mat4) -> Result[(), String] {
        profile_function()
        log("concat_transform({})", [&transform])

        t := Transform(transform)
        for self.active_transforms() {
            it *= &t
        }

        return Ok()
    }

    translate :: (&mut Self, v: vec3) -> Result[(), String] {
        profile_function()
        log("translate({})", [&v])

        t := Transform(mat4.from_scale(v))
        for self.active_transforms() {
            it *= &t
        }

        return Ok()
    }

    scale :: (&mut Self, v: vec3) -> Result[(), String] {
        profile_function()
        log("translate({})", [&v])

        t := Transform(mat4.from_scale(v))
        for self.active_transforms() {
            it *= &t
        }

        return Ok()
    }

    coordinate_system :: (&mut Self, name: string) -> Result[(), String] {
        profile_function()
        log("coordinate_system({})", [name])

        named_coordinate_systems[name] = current_transforms

        return Ok()
    }

    coord_sys_transform :: (&mut Self, name: string) -> Result[(), String] {
        profile_function()
        log("coord_sys_transform({})", [name])

        match named_coordinate_systems.get(name) {
            Some($t) -> {
                current_transforms = *t
            }

            None -> {
                log_error("No coordinate system '{}' exists", [name])
                return Err(fmt.format("No coordinate system '{}' exists", [name]))
            }
        }

        return Ok()
    }

    // rotate :: (&mut Self, angle: real, axis: vec3) -> Result[(), String] {
    //     profile_function()
    //     log("translate({})", [&v])

    //     mat := mat4.from_translation(v)
    //     for active_transforms() {
    //         it *= &mat
    //     }

    //     return Ok()
    // }

    make_float_texture :: (&Self, name: string, tex_to_world: &Transform, params: &TextureParams) -> Result[Rc[Texture[real]], String] {
        tex : Rc[Texture[real]] = if name == "constant" {
            try(ConstantTexture[real].make_float(tex_to_world, params))
        } else if name == "checkerboard" {
            try(Checkerboard2DTexture[real].make_float(tex_to_world, params))
        } else {
            return Err(fmt.format("Float texture '{}' unknown.", [name]))
        }

        self.report_unused_tex_params(params)

        return Ok(tex)
    }

    make_spectrum_texture :: (&Self, name: string, tex_to_world: &Transform, params: &TextureParams) -> Result[Rc[Texture[Spectrum]], String] {
        tex : Rc[Texture[Spectrum]] = if name == "constant" {
            try(ConstantTexture[Spectrum].make_spectrum(tex_to_world, params))
        } else if name == "checkerboard" {
            try(Checkerboard2DTexture[real].make_spectrum(tex_to_world, params))
        } else {
            return Err(fmt.format("Spectrum texture '{}' unknown.", [name]))
        }

        self.report_unused_tex_params(params)

        return Ok(tex)
    }

    texture :: (&mut Self, name: string, typ: string, tex_name: string, params: ParamSet) -> Result[(), String] {
        profile_function()
        log("texture({}, {}, {}, {})", [name, typ, tex_name, &params])

        tex_params := TextureParams(
            float_textures      = self.graphics_state.float_textures.get_mut()
            spectrum_textures   = self.graphics_state.spectrum_textures.get_mut()
            geom_params         = &params
            material_params     = &params
        )

        if typ == "float" {
            if tex_params.float_textures.contains(name) {
                // @todo: warn about duplicate texture name
            }

            // @todo: warn if animated transform
            tex := try(make_float_texture(tex_name, current_transforms.first(), &tex_params))

            if graphics_state.float_textures_shared {
                graphics_state.float_textures = Rc[GraphicsState.FloatTextureMap].new(graphics_state.float_textures.get().clone())
                graphics_state.float_textures_shared = false
            }
            graphics_state.float_textures.get_mut().set(name, tex)

            return Ok()
        } else if typ == "color" or typ == "spectrum" {
            if tex_params.spectrum_textures.contains(name) {
                // @todo: warn about duplicate texture name
            }

            // @todo: warn if animated transform
            tex := try(make_spectrum_texture(tex_name, current_transforms.first(), &tex_params))

            if graphics_state.spectrum_textures_shared {
                graphics_state.spectrum_textures = Rc[GraphicsState.SpectrumTextureMap].new(graphics_state.spectrum_textures.get().clone())
                graphics_state.spectrum_textures_shared = false
            }
            graphics_state.spectrum_textures.get_mut().set(name, tex)

            return Ok()
        } else {
            return Err(fmt.format("Invalid texture type '{}'. Expected 'float', 'color' or 'spectrum'", [typ]))
        }
    }
}

// helper functions
impl Pbrt {
    report_unused_tex_params :: (&Self, params: &TextureParams) {
        self.report_unused_params(params.geom_params)
        if ^*params.material_params != ^*params.geom_params {
            self.report_unused_params(params.material_params)
        }
    }

    report_unused_params :: (&Self, params: &ParamSet) {
        unused := params.get_unused()
        for p in unused.slice() {
            log("[WARNING] Parameter '{}' was never used", [p.name])
        }
    }

    expect_state :: (self: &Self, state: ApiState, message: string, args: []^any = []) #macro {
        if self.state != state {
            log_error(message, args)
            return Err(fmt.format(message, args))
        }
    }

    active_transforms :: (&mut Self) -> ActiveTransformIterator {
        return ActiveTransformIterator(self)
    }
}

ActiveTransformIterator :: struct {
    pbrt : &mut Pbrt
}

for_extension_active_transform_iterator :: (ati: ActiveTransformIterator, body: Code, by_ref: bool = false, mutable: bool = false) #for {
    mut it_index := 0
    for i in 0 .. ati.pbrt.current_transforms.transforms.length {
        if (i | @bin_lsl(1) | @bin_and(ati.pbrt.active_transform_bits)) != 0 {
            defer {
                it_index += 1
            }
            it : &mut Transform = ati.pbrt.current_transforms.transforms[i]
            @insert(body, _break=break, _continue=continue)
        }
    }
}